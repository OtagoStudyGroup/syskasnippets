<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Otago Study Group SYSKA</title>
    <link>/syskasnippets/post/</link>
    <description>Recent content in Posts on Otago Study Group SYSKA</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 05 Aug 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/syskasnippets/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>bash translate</title>
      <link>/syskasnippets/2019/08/bash-translate/</link>
      <pubDate>Mon, 05 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>/syskasnippets/2019/08/bash-translate/</guid>
      <description>tr or “translate or delete characters” is a super useful program on the command line.
My most common usage is to convert delimiters in files, such as tab separated to comma separated:
tr &amp;quot;\t&amp;quot; &amp;quot;,&amp;quot; &amp;lt; tab_separated_file.tsv or to work out how many columns I have by taking the first line of a file and converting the delimiters to new lines and then counting the number of lines:
echo -e &amp;quot;col1\tcol2\tcol3&amp;quot; &amp;gt; file.</description>
    </item>
    
    <item>
      <title>Case-insensitive Completion in Bash</title>
      <link>/syskasnippets/2019/05/case-insensitive-completion-in-bash/</link>
      <pubDate>Thu, 30 May 2019 00:00:00 +0000</pubDate>
      
      <guid>/syskasnippets/2019/05/case-insensitive-completion-in-bash/</guid>
      <description>Have you ever been annoyed by having to re-type a file you are looking for, just because the filename contains capital letter(s)?
Tab-completion can get you closer to the correct filename without knowing what the actual filename is, but it’s not quite smart enough to account for uppercase and lowercase letters (i.e. it’s case-sensitive).
For example, if you type coolfile and hit tab to complete the filename coolFile.txt, tab-completion won’t work.</description>
    </item>
    
    <item>
      <title>Using `less` more effectively</title>
      <link>/syskasnippets/2019/05/using-less-more-effectively/</link>
      <pubDate>Wed, 29 May 2019 00:00:00 +0000</pubDate>
      
      <guid>/syskasnippets/2019/05/using-less-more-effectively/</guid>
      <description>If you&amp;rsquo;ve ever used bash terminal before, you would have come across the less command at some point.
For anyone who is not familiar with less, less is a &amp;ldquo;paging&amp;rdquo; command that allows you to view file(s) of interest on your terminal. It is usually the default &amp;ldquo;pager&amp;rdquo; (program used to view a document) for a terminal environment that comes with your Unix/Linux operating system.
Now, you might ask &amp;ldquo;why bother using less when you can open it up on a text editor, or even better, point and click on the file&amp;rdquo;?</description>
    </item>
    
    <item>
      <title>Making it go faster</title>
      <link>/syskasnippets/2019/05/making-it-go-faster/</link>
      <pubDate>Fri, 24 May 2019 00:00:00 +0000</pubDate>
      
      <guid>/syskasnippets/2019/05/making-it-go-faster/</guid>
      <description>Recently I have been going through some old code that I needed to rerun. As part of doing so I was taking the opportunity to reimplement it with some new tricks that I have discovered since I wrote it ~2 years ago.
This particular script has many, many for loops which I now wanted to replace with purrr::map to make the code cleaner and easier to maintain.
As part of using purrr::map I wondered if I could also make the code go faster by parallelising the loop.</description>
    </item>
    
    <item>
      <title>RMarkdown</title>
      <link>/syskasnippets/2018/04/rmarkdown/</link>
      <pubDate>Fri, 13 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/syskasnippets/2018/04/rmarkdown/</guid>
      <description>This webpage gives some examples of a few of the cool additional things that can be done with relative ease when creating and Rmarkdown document.
https://holtzy.github.io/Pimp-my-rmd/</description>
    </item>
    
    <item>
      <title>Bash history</title>
      <link>/syskasnippets/2018/02/bash-history/</link>
      <pubDate>Mon, 19 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>/syskasnippets/2018/02/bash-history/</guid>
      <description>One of the most useful additions to my .bashrc file that I have found is the addition of this command to save all the commands that I run into a log file.
export PROMPT_COMMAND=&amp;#39;if [ &amp;quot;$(id -u)&amp;quot; -ne 0 ]; then echo &amp;quot;$(date &amp;quot;+%Y-%m-%d.%H:%M:%S&amp;quot;) $(pwd) $(history 1)&amp;quot; &amp;gt;&amp;gt; ~/.logs/bash-history-$(date &amp;quot;+%Y-%m-%d&amp;quot;).log; fi&amp;#39; This is super useful because it saves a new file for each day of all of the timestamped commands that I have run and the directory I was in when I ran them.</description>
    </item>
    
    <item>
      <title>usethis - project setup</title>
      <link>/syskasnippets/2018/02/usethis-project-setup/</link>
      <pubDate>Thu, 08 Feb 2018 12:10:31 -0700</pubDate>
      
      <guid>/syskasnippets/2018/02/usethis-project-setup/</guid>
      <description> One of the packages that was a highlight for me from rstudio::conf2018 was usethis.
This package forms part of the package building workflow but also general project workflows.
In a package development workflow some of the key functions are:
# creates a new dir and populates with a skeleton containing examples usethis::create_package(&amp;quot;/path/to/create/package&amp;quot;) # creates an R script in the R/ dir (don&amp;#39;t need to include the .R extension) usethis::use_r(&amp;quot;filename&amp;quot;) # series of license templates such as mit, gpl3, cc0 etc usethis::use_*_license_license(&amp;quot;name&amp;quot;) # initialises a testthat dir to put tests usethis::use_testthat() # creates a testfile usethis::use_test(&amp;quot;filename&amp;quot;) # creates a README file for your package usethis::use_readme_md() </description>
    </item>
    
    <item>
      <title>aRson threats and some best practices</title>
      <link>/syskasnippets/2017/12/arson-threats-and-some-best-practices/</link>
      <pubDate>Tue, 12 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>/syskasnippets/2017/12/arson-threats-and-some-best-practices/</guid>
      <description>Recently on twitter - the source of most of these posts - Jenny Bryan (@JennyBryan) posted a link to her slides from her talk she gave in Auckland (http://bit.ly/jenny-nz). It inpsired threats of arson for people that use
setwd(&amp;quot;/absolute/path/to/file&amp;quot;)  (this was because it reduces portability and outside of you using it the chances of someone having the exact directory setup is basically 0%)
and
rm(list = ls())  (because it interferes with peoples sessions and doesn&amp;rsquo;t sort out other session issues such as packages already loaded)</description>
    </item>
    
    <item>
      <title>Github Education Account</title>
      <link>/syskasnippets/2017/11/github-education-account/</link>
      <pubDate>Wed, 29 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>/syskasnippets/2017/11/github-education-account/</guid>
      <description>For people that aren&amp;rsquo;t aware, students are able to get private repos on github for free! On top of this there is also a bunch of other free tools that come along with this pack
To sign up for the pack head to https://education.github.com and follow the links. It is also possible to get academic discount for academic accounts so it&amp;rsquo;s also worth checking it out.</description>
    </item>
    
    <item>
      <title>Parallel install of R packages</title>
      <link>/syskasnippets/2017/11/parallel-install-of-r-packages/</link>
      <pubDate>Mon, 20 Nov 2017 12:10:31 -0700</pubDate>
      
      <guid>/syskasnippets/2017/11/parallel-install-of-r-packages/</guid>
      <description>This came up in my twitter feed from Rbloggers and looks pretty useful as a set and forget type thing.
See https://www.r-bloggers.com/speeding-up-package-installation-2/ for the actual post
Basically, install.packages() uses the environment setting for Ncpus, which by default is set to 1.
The current setting can be found with
# the second argument returns 1 if Ncpus is not set, instead of NULL getOption(&amp;quot;Ncpus&amp;quot;, 1L) Ncpus can be set with this command before running install.</description>
    </item>
    
  </channel>
</rss>